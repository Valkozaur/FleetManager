name: Deploy FleetManager to Hetzner

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      run: |
        # Add test commands here when you have them
        echo "Running basic import tests..."
        python -c "
import sys
sys.path.insert(0, '.')
try:
    from src.orders.poller.services.classifier import MailClassifier
    from src.orders.poller.services.logistics_data_extract import LogisticsDataExtractor
    from src.orders.poller.clients.gmail_client import GmailClient
    from src.orders.poller.clients.google_maps_client import GoogleMapsClient
    from src.orders.poller.clients.google_sheets_client import GoogleSheetsClient
    print('All imports successful')
except ImportError as e:
    print(f'Import error: {e}')
    sys.exit(1)
        "

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Hetzner
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT || 22 }}
        script: |
          # Create deployment directory if it doesn't exist
          mkdir -p ~/fleetmanager
          cd ~/fleetmanager

          # Download the latest docker-compose.yml
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml

          # Create .env file from secrets
          cat > .env << EOF
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
          GOOGLE_SHEETS_SPREADSHEET_ID=${{ secrets.GOOGLE_SHEETS_SPREADSHEET_ID }}
          GOOGLE_SHEETS_RANGE_NAME=${{ secrets.GOOGLE_SHEETS_RANGE_NAME || 'Sheet1!A:Z' }}
          GMAIL_CREDENTIALS_FILE=/app/credentials/credentials.json
          DATA_DIR=/app/data
          LOG_LEVEL=INFO
          TEST_MODE=false
          EOF

          # Log in to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Pull and run the latest image
          docker-compose pull
          docker-compose down
          docker-compose up -d

          # Clean up old images
          docker image prune -f

          # Show status
          docker-compose ps
          docker-compose logs --tail=20

    - name: Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT || 22 }}
        script: |
          cd ~/fleetmanager
          # Check if container is running
          if docker-compose ps | grep -q "Up"; then
            echo "✅ FleetManager container is running"
          else
            echo "❌ FleetManager container is not running"
            docker-compose logs
            exit 1
          fi

          # Check container health
          health_status=$(docker inspect --format='{{.State.Health.Status}}' fleetmanager 2>/dev/null || echo "no-healthcheck")
          echo "Container health status: $health_status"