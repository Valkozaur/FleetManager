name: Deploy FleetManager to Hetzner

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_DIR: /root/fleetmanager

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set IMAGE_NAME to lowercase
      id: image_name
      run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=FleetManager
          org.opencontainers.image.description=Gmail-based logistics order processing
          org.opencontainers.image.vendor=Valkozaur

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Run Trivy vulnerability scanner
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results to GitHub Security
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Prepare credentials file
      run: |
        mkdir -p /tmp/credentials
        echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > /tmp/credentials/credentials.json

    - name: Deploy credentials to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT || 22 }}
        source: "/tmp/credentials/credentials.json"
        target: "${{ env.DEPLOY_DIR }}/credentials/"
        strip_components: 2

    - name: Deploy to Hetzner
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT || 22 }}
        script: |
          set -e
          
          # Create deployment directory structure
          mkdir -p ${{ env.DEPLOY_DIR }}/{credentials,data,logs,scripts}
          cd ${{ env.DEPLOY_DIR }}

          # Download latest docker-compose.yml and scripts
          echo "üì• Downloading deployment files from repository..."
          curl -fsSL -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
          curl -fsSL -o scripts/health-check.sh https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/health-check.sh
          chmod +x scripts/health-check.sh

          # Validate required files
          if [ ! -f "credentials/credentials.json" ]; then
            echo "‚ùå ERROR: credentials/credentials.json not found after deployment!"
            exit 1
          fi

          # Create .env file from secrets
          cat > .env << 'EOF'
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
          GOOGLE_SHEETS_SPREADSHEET_ID=${{ secrets.GOOGLE_SHEETS_SPREADSHEET_ID }}
          GOOGLE_SHEETS_RANGE_NAME=${{ secrets.GOOGLE_SHEETS_RANGE_NAME || 'Sheet1!A:Z' }}
          GMAIL_CREDENTIALS_FILE=/app/credentials/credentials.json
          DATA_DIR=/app/data
          LOG_LEVEL=INFO
          TEST_MODE=false
          EOF

          # Validate .env was created
          if [ ! -s .env ]; then
            echo "‚ùå ERROR: Failed to create .env file"
            exit 1
          fi

          # Login to GitHub Container Registry
          echo "üîê Logging in to GitHub Container Registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Save current container name for rollback
          OLD_CONTAINER=$(docker ps -q -f name=fleetmanager)
          OLD_IMAGE=$(docker inspect fleetmanager --format='{{.Config.Image}}' 2>/dev/null || echo "none")
          
          echo "üì¶ Current image: $OLD_IMAGE"
          echo "üì¶ Deploying new image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

          # Pull new image
          echo "‚¨áÔ∏è  Pulling latest image..."
          docker-compose pull

          # Rename old container for potential rollback
          if [ -n "$OLD_CONTAINER" ]; then
            echo "üîÑ Renaming old container for rollback..."
            docker rename fleetmanager fleetmanager-old || true
          fi

          # Start new container
          echo "üöÄ Starting new container..."
          docker-compose up -d

          # Wait for container to start
          echo "‚è≥ Waiting for container to initialize..."
          sleep 10

          # Health check with retries
          echo "üè• Performing health checks..."
          MAX_RETRIES=6
          RETRY_DELAY=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i/$MAX_RETRIES..."
            
            # Check if container is running
            if ! docker-compose ps | grep -q "Up"; then
              echo "‚ùå Container is not running!"
              if [ $i -eq $MAX_RETRIES ]; then
                echo "‚ùå Health check failed after $MAX_RETRIES attempts"
                
                # Rollback
                echo "üîô Rolling back to previous version..."
                docker-compose down
                
                if [ "$OLD_IMAGE" != "none" ] && [ -n "$OLD_CONTAINER" ]; then
                  docker rename fleetmanager-old fleetmanager || true
                  docker start fleetmanager || true
                  echo "‚úÖ Rollback completed"
                fi
                
                echo "üìã Error logs from failed deployment:"
                docker-compose logs --tail=100
                exit 1
              fi
              sleep $RETRY_DELAY
              continue
            fi
            
            # Check container health status
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' fleetmanager 2>/dev/null || echo "none")
            echo "Container health status: $HEALTH_STATUS"
            
            if [ "$HEALTH_STATUS" = "healthy" ] || [ "$HEALTH_STATUS" = "none" ]; then
              echo "‚úÖ Container is healthy!"
              
              # Verify credentials are accessible
              if docker-compose exec -T fleetmanager test -f /app/credentials/credentials.json; then
                echo "‚úÖ Credentials file is accessible"
              else
                echo "‚ö†Ô∏è  Warning: Credentials file not found in container"
              fi
              
              # Cleanup old container
              if [ -n "$OLD_CONTAINER" ]; then
                echo "üßπ Cleaning up old container..."
                docker stop fleetmanager-old 2>/dev/null || true
                docker rm fleetmanager-old 2>/dev/null || true
              fi
              
              # Success!
              echo "‚úÖ Deployment successful!"
              break
            fi
            
            if [ $i -lt $MAX_RETRIES ]; then
              echo "‚è≥ Waiting ${RETRY_DELAY}s before next check..."
              sleep $RETRY_DELAY
            fi
          done

          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f --filter "until=24h"

          # Show final status
          echo ""
          echo "üìä Deployment Summary:"
          docker-compose ps
          echo ""
          echo "üìã Recent logs:"
          docker-compose logs --tail=30

    - name: Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT || 22 }}
        script: |
          cd ${{ env.DEPLOY_DIR }}
          
          echo "üè• Running comprehensive health check..."
          
          # Check if container is running
          if ! docker-compose ps | grep -q "Up"; then
            echo "‚ùå FleetManager container is not running"
            docker-compose logs --tail=100
            exit 1
          fi
          
          echo "‚úÖ FleetManager container is running"

          # Check container health
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' fleetmanager 2>/dev/null || echo "no-healthcheck")
          echo "Container health status: $HEALTH_STATUS"
          
          # Run health check script if available
          if [ -f "scripts/health-check.sh" ]; then
            bash scripts/health-check.sh | head -50
          fi
          
          echo ""
          echo "‚úÖ Deployment health check passed!"

    - name: Notify deployment status
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: ${{ secrets.HETZNER_PORT || 22 }}
        script: |
          cd ${{ env.DEPLOY_DIR }}
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL"
            echo "Repository: ${{ github.repository }}"
            echo "Commit: ${{ github.sha }}"
            echo "Deployed by: ${{ github.actor }}"
            echo "Timestamp: $(date)"
            
            # Log successful deployment
            echo "$(date) - Deployment successful - ${{ github.sha }}" >> logs/deployments.log
          else
            echo "‚ùå DEPLOYMENT FAILED"
            echo "Check logs above for details"
            
            # Log failed deployment
            echo "$(date) - Deployment failed - ${{ github.sha }}" >> logs/deployments.log
          fi