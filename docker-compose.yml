version: '3.8'

networks:
  fleetmanager-network:
    driver: bridge

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: fleetmanager-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-fleetmanager}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fleetmanager_dev}
      POSTGRES_DB: ${POSTGRES_DB:-fleetmanager}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fleetmanager}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fleetmanager-network

  # Email Processing Service
  email-processor:
    build:
      context: .
      dockerfile: services/email-processor/Dockerfile
    container_name: email-poller
    command: >
      bash -c "
          python main.py --email-id 19a2a3402652042f;
      "
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    volumes:
      # Persist data and tokens
      - email_poller_data:/app/data
      - email_poller_logs:/app/logs
      # Mount credentials (you'll need to provide these)
      - ./.credentials:/app/credentials:ro
    mem_limit: 512m
    mem_reservation: 256m
    cpus: 1.0
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/credentials/credentials.json || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - fleetmanager-network
    depends_on:
      - otel-collector

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.98.0
    container_name: otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus exporter
    networks:
      - fleetmanager-network
    depends_on:
      - jaeger
      - prometheus

  # Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector
    networks:
      - fleetmanager-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fleetmanager-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - fleetmanager-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  email_poller_data:
    driver: local
  email_poller_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
